HiveMQ

# Install the MQTT Publisher
# sudo pip3 install paho-mqtt

# open the MQTT browser client in web browser
# http://www.hivemq.com/demos/websocket-client/


import os
import sys
import time
import board
import adafruit_dht
import paho.mqtt.client as mqtt
import json

# Initial the dht device, with data pin connected to:
dhtDevice = adafruit_dht.DHT11(board.D19, use_pulseio=False)

sensor_data = {'temperature': 0, 'humidity': 0}   # in JSON format



MQTTServer = 'broker.mqttdashboard.com'

#MQTTServer = 'test.mosquitto.org'

TCPPort = 1883

WebSocketPort = 8080


client = mqtt.Client()

client.connect(MQTTServer, TCPPort, WebSocketPort)

client.loop_start()

if __name__ == '__main__':
    while True:
        try:        
            # Print the values to the serial port
            temperature = dhtDevice.temperature
            humidity = dhtDevice.humidity
            print("Temp: {:.1f} C    Humidity: {}% ".format( temperature, humidity))
            time.sleep(2.0)
            sensor_data['temperature'] = temperature
            sensor_data['humidity'] = humidity

            # Sending humidity and temperature data to HIVEMQ
            client.publish('DHT11_MQTT', json.dumps(sensor_data), 1)
            
            DHT11_DATA =  str(temperature)+','+ str(humidity)
            
            client.publish('DHT11_DATA', DHT11_DATA, 1)
            
            
            time.sleep(5)
        
        except RuntimeError as error:
            # Errors happen fairly often, DHT's are hard to read, just keep going
            print(error.args[0])
            time.sleep(2.0)
            continue

        except KeyboardInterrupt:
            client.loop_stop()
            client.disconnect()
            print ('Exiting Program')
            exit()
        


HiveMQ_PUB_SUB

# Install the MQTT Publisher
# sudo pip3 install paho-mqtt

# open the MQTT browser client in web browser
# http://www.hivemq.com/demos/websocket-client/


import os
import sys
import time
import board
import adafruit_dht
import paho.mqtt.client as mqtt
import json
import RPi.GPIO as GPIO

GPIO.setmode (GPIO.BCM)

GPIO.setup(6, GPIO.OUT)
GPIO.output (6, False)

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    # Subscribe, which need to put into on_connect
    # If reconnect after losing the connection with the broker, it will continue to subscribe to the raspberry/topic topic
    client.subscribe("InputTopic")

# The callback function, it will be triggered when receiving messages
def on_message(client, userdata, msg):
    print(f"{msg.topic} {msg.payload}")
    if (msg.payload == b'LEDON') :
        print ("Turn On the LED")
        GPIO.output(6, True)
    if (msg.payload == b'LEDOFF'):
        print ("Turn off the LED")
        GPIO.output(6, False)


# Initial the dht device, with data pin connected to:
dhtDevice = adafruit_dht.DHT11(board.D19, use_pulseio=False)

sensor_data = {'temperature': 0, 'humidity': 0}



MQTTServer = 'broker.mqttdashboard.com'

#MQTTServer = 'test.mosquitto.org'

TCPPort = 1883

WebSocketPort = 8080


client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(MQTTServer, TCPPort, WebSocketPort)

client.loop_start()

if __name__ == '__main__':
    while True:
        try:        
            # Print the values to the serial port
            temperature = dhtDevice.temperature
            humidity = dhtDevice.humidity
            print("Temp: {:.1f} C    Humidity: {}% ".format( temperature, humidity))
            time.sleep(2.0)
            sensor_data['temperature'] = temperature
            sensor_data['humidity'] = humidity

            # Sending humidity and temperature data to HIVEMQ
            client.publish('DHT11_MQTT', json.dumps(sensor_data), 1)
            
            DHT11_DATA =  str(temperature)+','+ str(humidity)
            
            client.publish('DHT11_DATA', DHT11_DATA, 1)
            
            
            time.sleep(5)
        
        except RuntimeError as error:
            # Errors happen fairly often, DHT's are hard to read, just keep going
            print(error.args[0])
            time.sleep(2.0)
            continue

        except KeyboardInterrupt:
            client.loop_stop()
            client.disconnect()
            print ('Exiting Program')
            exit()
        

